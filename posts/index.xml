<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Blog of Gris</title>
    <link>https://blog.grisge.info/posts/</link>
    <description>Recent content in Posts on Blog of Gris</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 13 Oct 2020 22:00:14 +0800</lastBuildDate><atom:link href="https://blog.grisge.info/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Nispor: Varlink interface for querying network state</title>
      <link>https://blog.grisge.info/posts/nispor_intro/</link>
      <pubDate>Tue, 13 Oct 2020 22:00:14 +0800</pubDate>
      
      <guid>https://blog.grisge.info/posts/nispor_intro/</guid>
      <description>After battling with Linux Network APIs, I decided to create rust project providing a state describing API for querying linux kernel network state.
The new project is named as Nispor, in the short of Network Inspector.
Why Nispor In short, existing solutions is not simple enough:
  iproute The iproute provides json output, but command line output cannot be really called as a library considering the risk of changing format or string.</description>
    </item>
    
    <item>
      <title>Git: rebase and sync with upstream</title>
      <link>https://blog.grisge.info/posts/git_rebase_and_sync_with_upstream/</link>
      <pubDate>Thu, 19 Mar 2020 01:04:35 +0800</pubDate>
      
      <guid>https://blog.grisge.info/posts/git_rebase_and_sync_with_upstream/</guid>
      <description>Git: rebase and sync with upstream I have been asked to do rebase on git branch a lot, so I create some scripts to help me so.
First of all, assuming your git repo is a clone of upstream. Please add upstream git link to your current git repo:
git remote add upstream &amp;lt;link_to_upstream.git&amp;gt; Then place this script in your $PATH(for example: $HOME/bin) as git_sync_upstream which will sync origin/master with upstream/master.</description>
    </item>
    
    <item>
      <title>Thinkpad: Turnoff the mic mute, sound mute and power button LEDs</title>
      <link>https://blog.grisge.info/posts/disable_thinkpad_leds/</link>
      <pubDate>Fri, 28 Feb 2020 08:09:14 +0800</pubDate>
      
      <guid>https://blog.grisge.info/posts/disable_thinkpad_leds/</guid>
      <description>Thinkpad: Turnoff the mic mute, sound mute and power button LEDs #!/bin/bash SYSFS_THINKPAD_LED=&amp;#34;/sys/devices/platform/thinkpad_acpi/leds&amp;#34; for LED in platform::mute platform::micmute tpacpi::power; do echo 0 | sudo tee &amp;#34;$SYSFS_THINKPAD_LED/$LED/brightness&amp;#34; done </description>
    </item>
    
    <item>
      <title>IPv6 Automatic Configuration in Linux</title>
      <link>https://blog.grisge.info/posts/ipv6_autoconf_in_linux/</link>
      <pubDate>Fri, 22 Feb 2019 23:55:13 +0800</pubDate>
      
      <guid>https://blog.grisge.info/posts/ipv6_autoconf_in_linux/</guid>
      <description>IPv4 vs IPv6 on Automatic Configuration In world of IPv4, DHCPv4 provides a perfect way for IPv4 automatic configuration including IP address, DNS and routing entires. In world of IPv6, above works has been split into types:
  Stateless automatic configuration &amp;ndash; IPv6 Router Advertisement(IPv6-RA).
  Stateful automatic configuration &amp;ndash; DHCPv6.
  The IPv6-RA is designed to provides fundamental network configuration to host with minimum cost. The DHCPv6 is designed to provides additional and extensive network configuration.</description>
    </item>
    
  </channel>
</rss>
